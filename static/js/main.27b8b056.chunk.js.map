{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["classifier","url","App","videoRef","useRef","imageRef","useState","model","setModel","result","setResult","input","setInput","facingMode","setFacingMode","useEffect","startWebcam","ml5","imageClassifier","console","log","time","predict","media","a","classify","error","results","current","srcObject","setTimeout","clearTimeout","stopWebcam","undefined","navigator","mediaDevices","getUserMedia","video","then","stream","catch","getTracks","forEach","track","stop","style","display","flexDirection","alignItems","justifyContent","className","type","onClick","prev","ref","width","window","innerWidth","height","innerHeight","autoPlay","onChange","e","objectURL","URL","createObjectURL","target","files","src","map","item","ind","label","role","confidence","aria-valuenow","toFixed","aria-valuemin","aria-valuemax","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27b8b056.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport ml5 from \"ml5\";\n\nlet classifier;\nlet objectDetector;\nconst delay = 450\n// const url = \"https://teachablemachine.withgoogle.com/models/RrGhF9eh_/\"\n// let url = \"https://teachablemachine.withgoogle.com/models/c5QHqrAOk/\"\n// const url = \"https://teachablemachine.withgoogle.com/models/zvuTPJFzc/\"\n// let url ='https://teachablemachine.withgoogle.com/models/lP8sH70Bi/'\n// let url = 'https://teachablemachine.withgoogle.com/models/rxnp5FoT0/'\nlet url ='https://teachablemachine.withgoogle.com/models/ntvbyZsmT/'\nurl += 'model.json'\n// const url = './model.json'\n\nexport default function App() {\n  const videoRef = useRef();\n  const imageRef = useRef();\n  \n  const [model , setModel] = useState(url)\n  const [result, setResult] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [input,setInput] = useState(true)\n  const [facingMode,setFacingMode] = useState(true)\n  useEffect(() => {    \n      startWebcam()\n      if(model == \"\"){\n        setModel(url)\n      }else{\n        classifier = ml5.imageClassifier(model, () => {\n          console.log(\"Image Model is Loaded\")\n          console.log(model)\n        });\n      }\n  }, [model]);\n  const predict = async (media) =>{\n    await classifier.classify(media, (error, results) => {\n      if (error) {\n        console.error(error);\n        return;\n      }\n      setResult(results);\n    }); \n  }\n  let time;\n  useEffect(() => {\n      if (classifier) {\n        \n        if(!input) {\n          clearTimeout(time)\n          stopWebcam()\n          if(videoRef.current.srcObject) videoRef.current.srcObject = undefined\n        }else{\n          if(!videoRef.current.srcObject) startWebcam()\n             time = setTimeout(() => {\n              predict(videoRef.current)\n            }, delay);\n        }\n      \n      }\n    // console.log(result)\n  }, [result,input])\n\n  const startWebcam = async () =>{\n     await navigator.mediaDevices\n        .getUserMedia({ video: {\n          facingMode: facingMode ?  \"environment\"  :  \"user\" \n        } })\n        .then(stream => videoRef.current.srcObject = stream)\n        .catch(console.log);\n  }\n  const stopWebcam = async () =>{\n    try{\n      const stream =  await videoRef.current.srcObject;\n      await  stream.getTracks().forEach(function(track) {\n        track.stop();\n      });\n    }catch(e){}\n  }\n\n  const uploadImage = e =>{\n    try{\n      const objectURL = URL.createObjectURL(e.target.files[0])\n      imageRef.current.src = objectURL\n      predict(imageRef.current)\n    }catch(e){console.error(e)}\n  }\n  return (\n    <div style={{display: 'flex',flexDirection:'column',alignItems: 'center',justifyContent: 'center'}}>\n      <div className=\"flex\" >\n        <h1>Camera Classification</h1>\n        <button type=\"button\" className=\"btn btn-outline-success\" onClick={() => {setInput(prev => !prev)}}>{!input ? \"Camera Classification\":\"File Classification\"  }</button>\n        {/* <button type=\"button\" className=\"btn btn-outline-warning\" onClick={() => {setInput(1);}}>Object Detector</button> */}\n      </div>\n      <video\n        ref={videoRef}\n        width={input ? window.innerWidth:0}\n        height={input ? window.innerHeight*.75:0}\n        autoPlay\n        onClick={() =>{if(input){stopWebcam();setFacingMode(prev=>!prev);startWebcam()}}}\n      />      \n      {input ? \"\":<input type=\"file\" className=\"btn btn-outline-success\" onChange={uploadImage}/>  }\n      <img \n      ref={imageRef}\n      width={!input ? window.innerWidth*.5:0}\n      height={!input ? window.innerHeight*.5:0}\n      />\n      {classifier && result && result !== undefined ? \n      <div >\n        <h1 >Result</h1>\n        {result.map((item, ind) => <p key={ind}>{item.label} \n\n        <div className=\"progress\">\n          <div className=\"progress-bar\" role=\"progressbar\" style={{width:(item.confidence*170)}} aria-valuenow={(item.confidence*100).toFixed(2) } aria-valuemin=\"0\" aria-valuemax=\"100\">{(item.confidence*100).toFixed(2) }%</div>\n        </div>\n        </p>)}\n      </div>\n      \n      :<>กำลังโหลด ...</> }\n      \n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}