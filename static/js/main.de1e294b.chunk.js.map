{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["classifier","App","videoRef","useRef","useState","result","setResult","input","setInput","useEffect","startWebcam","ml5","imageClassifier","url","console","log","classify","current","error","results","stopWebcam","navigator","mediaDevices","getUserMedia","video","then","stream","srcObject","catch","tracks","getTracks","forEach","track","stop","style","display","flexDirection","alignItems","justifyContent","className","type","onClick","ref","width","window","innerWidth","height","innerHeight","autoPlay","accept","undefined","map","item","ind","label","role","confidence","toFixed","aria-valuenow","aria-valuemin","aria-valuemax","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2HAGIA,E,wEAEW,SAASC,IACtB,IAAMC,EAAWC,mBADW,EAGAC,mBAAS,IAHT,mBAGrBC,EAHqB,KAGbC,EAHa,OAIAF,oBAAS,GAJT,gCAKHA,mBAAS,IALN,mBAKrBG,EALqB,KAKfC,EALe,KAM5BC,qBAAU,WACRC,IAEAV,EAAaW,IAAIC,gBAAgBC,uEAAkB,WACjDC,QAAQC,IAAI,yBAEdD,QAAQC,IAAIf,KAGX,IACHS,qBAAU,WACJT,IACW,IAAVO,EACDP,EAAWgB,SAASd,EAASe,SAAS,SAACC,EAAOC,GACxCD,EACFJ,QAAQI,MAAMA,GAGhBZ,EAAUa,MAEK,IAAVZ,GACPa,OAIH,CAACf,EAAOE,IACX,IAAMG,EAAc,WAChBW,UAAUC,aACPC,aAAa,CAAEC,OAAO,IACtBC,MAAK,SAAAC,GAAM,OAAIxB,EAASe,QAAQU,UAAYD,KAC5CE,MAAMd,QAAQC,MAEfK,EAAa,WACjB,IACMS,EADU3B,EAASe,QAAQU,UACXG,YACtBD,EAAOE,SAAQ,SAAAC,GAAK,OAAGH,EAAOI,WAGhC,OACE,sBAAKC,MAAO,CAACC,QAAS,OAAOC,cAAc,SAASC,WAAY,SAASC,eAAgB,UAAzF,UACE,sBAAKC,UAAU,OAAf,UACE,wBAAQC,KAAK,SAASD,UAAU,0BAA0BE,QAAS,kBAAMjC,EAAS,IAAlF,oBACA,wBAAQgC,KAAK,SAASD,UAAU,0BAA0BE,QAAS,WAAOjC,EAAS,GAAGF,EAAU,KAAhG,qBAES,IAAVC,EAAc,uBACbmC,IAAKxC,EACLyC,MAAOC,OAAOC,WACdC,OAA2B,IAAnBF,OAAOG,YACfC,UAAQ,IAEC,IAAVzC,EAAc,uBAAOiC,KAAK,OAAOS,OAAO,eACvC,6BAEDjD,GAAcK,QAAqB6C,IAAX7C,EACzB,gCACE,wCACCA,EAAO8C,KAAI,SAACC,EAAMC,GAAP,OAAe,8BAAcD,EAAKE,MAE9C,qBAAKf,UAAU,WAAf,SACA,sBAAKA,UAAU,eAAegB,KAAK,cAAcrB,MAAO,CAACS,OAAuB,IAAhBS,EAAKI,YAAgBC,QAAQ,IAAKC,iBAAgC,IAAhBN,EAAKI,YAAgBC,QAAQ,GAAKE,gBAAc,IAAIC,gBAAc,MAApL,WAA4M,IAAhBR,EAAKI,YAAgBC,QAAQ,GAAzN,WAHmCJ,SAQpC,qDC3EP,IAYeQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACtE,EAAD,MAEFuE,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.de1e294b.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport ml5 from \"ml5\";\n\nlet classifier;\nconst url = \"https://teachablemachine.withgoogle.com/models/RrGhF9eh_/\"\nexport default function App() {\n  const videoRef = useRef();\n  \n  const [result, setResult] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [input,setInput] = useState(0)\n  useEffect(() => {\n    startWebcam()\n\n    classifier = ml5.imageClassifier(url+\"model.json\", () => {\n      console.log(\"Load Model success\")\n    });\n    console.log(classifier)\n\n\n  }, []);\n  useEffect(() => {\n    if (classifier) {\n      if(input === 0){\n        classifier.classify(videoRef.current, (error, results) => {\n          if (error) {\n            console.error(error);\n            return;\n          }\n          setResult(results);\n        }); \n      }else if(input === 1){\n        stopWebcam()\n      }\n     \n    }\n  }, [result,input])\n  const startWebcam = () =>{\n      navigator.mediaDevices\n        .getUserMedia({ video: true })\n        .then(stream => videoRef.current.srcObject = stream)\n        .catch(console.log);\n  }\n  const stopWebcam = () =>{\n    const stream =  videoRef.current.srcObject;\n    const tracks = stream.getTracks();\n    tracks.forEach(track =>tracks.stop());\n  }\n\n  return (\n    <div style={{display: 'flex',flexDirection:'column',alignItems: 'center',justifyContent: 'center'}}>\n      <div className=\"flex\" >\n        <button type=\"button\" className=\"btn btn-outline-success\" onClick={() => setInput(0)}>WebCam</button>\n        <button type=\"button\" className=\"btn btn-outline-warning\" onClick={() => {setInput(1);setResult([])}}>File</button>\n      </div>\n      {input === 0 ? <video\n        ref={videoRef}\n        width={window.innerWidth}\n        height={window.innerHeight*.75}\n        autoPlay\n      ></video> \n      :input === 1 ? <input type='file' accept=\"image/jpeg\"/>\n      : <></>}\n      \n      {classifier && result && result !== undefined ? \n      <div >\n        <h1 >Result</h1>\n        {result.map((item, ind) => <p key={ind}>{item.label} \n\n        <div className=\"progress\">\n        <div className=\"progress-bar\" role=\"progressbar\" style={{width:(item.confidence*100).toFixed(2)}} aria-valuenow={(item.confidence*100).toFixed(2) } aria-valuemin=\"0\" aria-valuemax=\"100\">{(item.confidence*100).toFixed(2) }%</div>\n        </div>\n        </p>)}\n      </div>\n      \n      :<>Loading...</> }\n      \n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}