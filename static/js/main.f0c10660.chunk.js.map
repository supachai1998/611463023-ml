{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["classifier","objectDetector","url","App","videoRef","useRef","useState","result","setResult","input","setInput","useEffect","startWebcam","ml5","imageClassifier","console","log","setTimeout","classify","current","error","results","detect","a","navigator","mediaDevices","getUserMedia","video","then","stream","srcObject","catch","style","display","flexDirection","alignItems","justifyContent","className","type","onClick","ref","width","window","innerWidth","height","innerHeight","autoPlay","undefined","map","item","ind","label","role","confidence","aria-valuenow","toFixed","aria-valuemin","aria-valuemax","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2HAGIA,EACAC,E,+FACEC,EAAM,4DACG,SAASC,IACtB,IAAMC,EAAWC,mBADW,EAGAC,mBAAS,IAHT,mBAGrBC,EAHqB,KAGbC,EAHa,OAIAF,oBAAS,GAJT,gCAKHA,mBAAS,IALN,mBAKrBG,EALqB,KAKfC,EALe,KAM5BC,qBAAU,WACRC,IAEAZ,EAAaa,IAAIC,gBAAgBZ,EAAI,cAAc,WACjDa,QAAQC,IAAI,4BAEdf,EAAiBY,IAAIZ,eAAeC,EAAI,cAAa,WACnDa,QAAQC,IAAI,6BAEdD,QAAQC,IAAIf,KAGX,IACHU,qBAAU,WACJX,GAAcC,IACH,IAAVQ,EACDQ,YAAW,WACTjB,EAAWkB,SAASd,EAASe,SAAS,SAACC,EAAOC,GACxCD,EACFL,QAAQK,MAAMA,GAGhBZ,EAAUa,QAEX,KACc,IAAVZ,GACPQ,YAAW,WACThB,EAAeqB,OAAOlB,EAASe,SAAS,SAACC,EAAOC,GAC3CD,EACDL,QAAQK,MAAMA,GAGhBL,QAAQC,IAAIK,QAEb,QAON,CAACd,EAAOE,IACX,IAAMG,EAAW,uCAAG,sBAAAW,EAAA,sEACXC,UAAUC,aACZC,aAAa,CAAEC,OAAO,IACtBC,MAAK,SAAAC,GAAM,OAAIzB,EAASe,QAAQW,UAAYD,KAC5CE,MAAMhB,QAAQC,KAJD,2CAAH,qDAYjB,OACE,sBAAKgB,MAAO,CAACC,QAAS,OAAOC,cAAc,SAASC,WAAY,SAASC,eAAgB,UAAzF,UACE,sBAAKC,UAAU,OAAf,UACE,wBAAQC,KAAK,SAASD,UAAU,0BAA0BE,QAAS,kBAAM7B,EAAS,IAAlF,4BACA,wBAAQ4B,KAAK,SAASD,UAAU,0BAA0BE,QAAS,WAAO7B,EAAS,IAAnF,gCAEF,uBACE8B,IAAKpC,EACLqC,MAAOC,OAAOC,WACdC,OAA2B,IAAnBF,OAAOG,YACfC,UAAQ,IAGT9C,GAAcO,QAAqBwC,IAAXxC,EACzB,gCACE,wCACCA,EAAOyC,KAAI,SAACC,EAAMC,GAAP,OAAe,8BAAcD,EAAKE,MAE9C,qBAAKd,UAAU,WAAf,SACA,sBAAKA,UAAU,eAAee,KAAK,cAAcpB,MAAO,CAACS,MAAuB,IAAhBQ,EAAKI,YAAkBC,iBAAgC,IAAhBL,EAAKI,YAAgBE,QAAQ,GAAKC,gBAAc,IAAIC,gBAAc,MAAzK,WAAiM,IAAhBR,EAAKI,YAAgBE,QAAQ,GAA9M,WAHmCL,SAQpC,qDC1FP,IAYeQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACjE,EAAD,MAEFkE,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f0c10660.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport ml5 from \"ml5\";\n\nlet classifier;\nlet objectDetector;\nconst url = \"https://teachablemachine.withgoogle.com/models/RrGhF9eh_/\"\nexport default function App() {\n  const videoRef = useRef();\n  \n  const [result, setResult] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [input,setInput] = useState(0)\n  useEffect(() => {\n    startWebcam()\n\n    classifier = ml5.imageClassifier(url+\"model.json\", () => {\n      console.log(\"Image Model is Loaded\")\n    });\n    objectDetector = ml5.objectDetector(url+\"model.json\",()=>{\n      console.log(\"object Model is Loaded\")\n    } );\n    console.log(objectDetector)\n\n\n  }, []);\n  useEffect(() => {\n    if (classifier && objectDetector) {\n      if(input === 0){\n        setTimeout(() => {\n          classifier.classify(videoRef.current, (error, results) => {\n            if (error) {\n              console.error(error);\n              return;\n            }\n            setResult(results);\n          }); \n        }, 300);\n      }else if(input === 1){\n        setTimeout(() => {\n          objectDetector.detect(videoRef.current, (error, results) => {\n            if(error) {\n              console.error(error)\n              return\n            }\n            console.log(results)\n          })\n        }, 300);\n      }else{\n        ;\n        // add more here !\n      }\n     \n    }\n  }, [result,input])\n  const startWebcam = async () =>{\n     await navigator.mediaDevices\n        .getUserMedia({ video: true })\n        .then(stream => videoRef.current.srcObject = stream)\n        .catch(console.log);\n  }\n  const stopWebcam = () =>{\n    const stream =  videoRef.current.srcObject;\n    const tracks = stream.getTracks();\n    tracks.forEach(track =>tracks.stop());\n  }\n\n  return (\n    <div style={{display: 'flex',flexDirection:'column',alignItems: 'center',justifyContent: 'center'}}>\n      <div className=\"flex\" >\n        <button type=\"button\" className=\"btn btn-outline-success\" onClick={() => setInput(0)}>Image Classify</button>\n        <button type=\"button\" className=\"btn btn-outline-warning\" onClick={() => {setInput(1);}}>Object Detector</button>\n      </div>\n      <video\n        ref={videoRef}\n        width={window.innerWidth}\n        height={window.innerHeight*.75}\n        autoPlay\n      ></video> \n      \n      {classifier && result && result !== undefined ? \n      <div >\n        <h1 >Result</h1>\n        {result.map((item, ind) => <p key={ind}>{item.label} \n\n        <div className=\"progress\">\n        <div className=\"progress-bar\" role=\"progressbar\" style={{width:(item.confidence*110)}} aria-valuenow={(item.confidence*100).toFixed(2) } aria-valuemin=\"0\" aria-valuemax=\"100\">{(item.confidence*100).toFixed(2) }%</div>\n        </div>\n        </p>)}\n      </div>\n      \n      :<>Loading...</> }\n      \n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}